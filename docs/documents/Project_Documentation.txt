# Project Documentation: NutriChef

## 1. Introduction

**Project Name:** NutriChef  
**Brief Overview:** NutriChef is an intelligent recipe and nutrition companion designed to assist users in managing their recipes, understanding nutritional information, catering to dietary restrictions and allergies, and discovering new culinary ideas. The application integrates Artificial Intelligence (AI) for advanced functionalities such as classifying food items from images, parsing recipes from text using Natural Language Processing (NLP), and offering personalized dietary recommendations.

**Problems it Aims to Solve:**
* **Recipe Management:** Simplifies the organization, storage, and retrieval of personal and public recipes
* **Nutritional Information Access:** Provides easy access to detailed nutritional information for various food items and recipes
* **Dietary Restriction Management:** Allows users to specify allergies and dietary preferences, filtering out unsuitable recipes
* **Culinary Discovery:** Facilitates the discovery of new recipes and ingredients tailored to user preferences
* **Meal Planning:** Streamlines meal planning by providing tools to organize recipes and generate shopping lists
* **Ingredient Understanding:** Helps users identify ingredients through image classification and find suitable substitutes
* **Efficient Recipe Input:** Offers a streamlined recipe pipeline for parsing and saving recipes from raw text
* **Pantry Management:** Enables users to track ingredients they have on hand for better meal planning

## 2. Project Scope

**Target Audience:**
* **General Users:** Individuals interested in cooking, exploring new recipes, and managing their nutritional intake
* **Users with Dietary Needs:** People with specific allergies, intolerances, or dietary preferences who need reliable recipe filtering
* **Platform Administrators:** Personnel responsible for maintaining the application, managing user accounts, and monitoring AI model performance

**Key Goals and Objectives:**
* Provide a centralized platform for recipe management
* Offer comprehensive nutritional analysis
* Deliver personalized user experiences based on dietary restrictions
* Leverage AI for enhanced functionality (image classification, NLP parsing, ingredient substitution)
* Ensure secure user account management with email verification
* Facilitate easy recipe contribution through structured forms and raw text parsing
* Develop a user-friendly interface using modern web technologies
* Enable administrative oversight of users, recipes, and system performance
* Provide functional meal planning and shopping list generation
* Implement comprehensive user pantry management

## 3. Core Functionalities

### 3.1 User-Facing Features

#### User Account Management
* **Registration:** Secure user sign-up process with email verification
* **Login:** Authenticated access with JWT tokens and password toggle functionality
* **Email Verification:** System for verifying user email addresses
* **Password Management:** Secure password storage with show/hide functionality
* **User Settings:** Profile management, allergy preferences, and account customization

#### Recipe Management
* **Browse & Search:** Explore public recipes with robust search filters and pagination
* **View Details:** Access comprehensive recipe information including ingredients, instructions, timing, and nutritional data
* **Upload via Form:** Submit recipes through structured forms with image upload
* **Upload via Raw Text:** Paste recipe text for AI-powered parsing using Google Gemini
* **Recipe Visibility:** Control whether recipes are public or private
* **Recipe Ratings:** Rate and review recipes with star-based system

#### Personalization
* **Allergy Management:** Comprehensive allergy and intolerance tracking system
* **Personalized Recipe Feed:** Filter recipes based on user allergies and preferences
* **User Pantry Management:** Track ingredients on hand for better meal planning
* **Recipe Suggestions:** Curated recipe recommendations beyond allergy-based filtering

#### AI-Powered Tools
* **Ingredient Classifier:** Image-based food identification using TensorFlow models
* **Nutrition Lookup:** Detailed nutritional information for food items
* **Ingredient Substitution:** AI-powered substitute recommendations
* **NLP Recipe Parser:** Text-to-structured recipe conversion using Google Gemini
* **Floating Chatbot:** AI-powered assistance for user queries

#### Meal Planning and Shopping
* **Meal Planner:** Weekly meal planning interface with drag-and-drop functionality
* **Shopping Basket:** Generate and manage shopping lists from meal plans
* **Pantry Integration:** Smart shopping lists that consider available ingredients
* **Nutritional Tracking:** Daily and weekly nutritional summaries

#### Additional Features
* **Contact System:** User feedback and support request system
* **About Us & Privacy:** Information pages about the platform and data handling
* **Responsive Design:** Mobile-friendly interface using Tailwind CSS
* **Animated Background:** Engaging visual elements with floating orbs and gradients

### 3.2 Administrator Features

#### Admin Dashboard
* **Overview Statistics:** Platform usage metrics and user activity
* **Quick Actions:** Direct access to common administrative tasks
* **System Health:** Performance monitoring and status indicators

#### User Management
* **User List:** View all registered users with search and filtering
* **User Details:** Access individual user profiles and information
* **Role Management:** Modify user roles and permissions
* **Account Actions:** Suspend, delete, or modify user accounts

#### Recipe Management
* **Recipe Overview:** View all recipes with filtering and search
* **Content Moderation:** Review and manage recipe content
* **Recipe Actions:** Edit, delete, or feature recipes
* **Visibility Control:** Manage public/private recipe settings

#### AI Model Performance
* **Classification Scores:** Monitor ingredient classifier performance
* **Accuracy Metrics:** Track prediction accuracy and confidence scores
* **Model Health:** System performance monitoring

#### Contact Message Management
* **Message Inbox:** View and respond to user messages
* **Response System:** Reply to inquiries directly from admin interface
* **Message Tracking:** Mark messages as read/unread and track responses

## 4. Technologies Used

### 4.1 Backend Technologies
* **Programming Language:** Python 3.9+
* **Framework:** Flask (micro web framework)
* **Database ORM:** SQLAlchemy
* **Authentication:** Flask-JWT-Extended
* **Email Service:** Flask-Mail
* **Database:** MySQL with mysql-connector-python

### 4.2 AI/ML Libraries
* **Google Gemini:** NLP recipe parsing and text processing
* **TensorFlow:** Image classification for ingredient identification
* **Pandas:** Data manipulation and analysis
* **RapidFuzz/FuzzyWuzzy:** Fuzzy string matching for ingredient matching

### 4.3 Frontend Technologies
* **Programming Language:** JavaScript with JSX
* **Framework:** React (Single Page Application)
* **Build Tool:** Vite (fast development server and build tool)
* **Styling:** Tailwind CSS (utility-first CSS framework)
* **Routing:** React Router
* **State Management:** React Context API
* **Icons:** React Icons (Heroicons, Font Awesome)

### 4.4 DevOps/Deployment
* **Containerization:** Docker and Docker Compose
* **Web Server:** Nginx (frontend static file serving)
* **Environment Management:** Environment variables and configuration files

## 5. Software Architecture

### 5.1 Overall Architecture
NutriChef follows a **client-server web application** architecture:
* **Frontend:** React SPA with Tailwind CSS styling
* **Backend:** Flask RESTful API with layered architecture
* **Communication:** HTTP requests to RESTful API endpoints
* **Database:** MySQL relational database with SQLAlchemy ORM

### 5.2 Frontend Architecture
* **Single Page Application:** React-based SPA with dynamic content updates
* **Component-Based Structure:** Modular React components organized by functionality
* **Routing:** Client-side routing with React Router
* **State Management:** Context API for global state (authentication, modals, meal plans)
* **Static Asset Serving:** Vite-built assets served by Nginx

### 5.3 Backend Architecture
* **RESTful API:** Flask-based API with blueprint organization
* **Layered Architecture:**
  * **Routes (`backend/routes/`):** API endpoint definitions using Flask Blueprints
  * **Services (`backend/services/`):** Business logic and AI model integration
  * **Data Access Objects (`backend/dao/`):** Database interaction layer
  * **Models (`backend/models/`):** SQLAlchemy database models
* **AI Integration:** Dedicated AI models directory with specialized modules

### 5.4 Database Architecture
* **Relational Database:** MySQL with comprehensive schema
* **Key Tables:** Users, Recipes, Ingredients, Allergies, Meal Plans, Pantry, Contact Messages
* **Relationships:** Standard relational links with foreign key constraints
* **Data Integrity:** Proper indexing and constraint management

## 6. Database Schema Details

### 6.1 Core Tables

#### Users Table
* **Primary Key:** UserID (INT, AUTO_INCREMENT)
* **Key Columns:** Name, Email, PasswordHash, Role, CreatedAt, UpdatedAt
* **Purpose:** User account management and authentication

#### Recipes Table
* **Primary Key:** RecipeID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, Title, Description, Instructions, ImageURL, PreparationTimeMinutes, CookingTimeMinutes, Servings, IsPublic, CreatedAt, UpdatedAt
* **Purpose:** Recipe storage and management

#### Ingredients Table
* **Primary Key:** IngredientID (INT, AUTO_INCREMENT)
* **Key Columns:** Name, CreatedAt
* **Purpose:** Ingredient catalog and reference

#### RecipeIngredients Table
* **Primary Key:** RecipeIngredientID (INT, AUTO_INCREMENT)
* **Key Columns:** RecipeID, IngredientID, Quantity, Unit
* **Purpose:** Many-to-many relationship between recipes and ingredients

#### AllergyIntolerances Table
* **Primary Key:** id (INT, AUTO_INCREMENT)
* **Key Columns:** name, CreatedAt
* **Purpose:** Allergy and intolerance definitions

#### UserAllergies Table
* **Primary Key:** UserAllergyID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, AllergyID
* **Purpose:** User-specific allergy associations

#### UserPantryIngredients Table
* **Primary Key:** UserPantryIngredientID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, IngredientID, Quantity, Unit, CreatedAt, UpdatedAt
* **Purpose:** User pantry management

#### UserMealPlans Table
* **Primary Key:** UserMealPlanID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, MealPlanData (JSON), CreatedAt, UpdatedAt
* **Purpose:** Meal planning data storage

#### ContactMessages Table
* **Primary Key:** MessageID (INT, AUTO_INCREMENT)
* **Key Columns:** Name, Email, Message, Replied, CreatedAt
* **Purpose:** User support and feedback system

#### ClassificationResults Table
* **Primary Key:** ResultID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, UploadedImageURL, PredictedFoodName, NutritionInfoJSON, score, ClassificationTimestamp
* **Purpose:** AI classification result tracking

#### RecipeRatings Table
* **Primary Key:** RatingID (INT, AUTO_INCREMENT)
* **Key Columns:** UserID, RecipeID, Rating, Comment, CreatedAt
* **Purpose:** Recipe rating and review system

### 6.2 Supporting Tables
* **Substitutions:** Ingredient substitution relationships
* **IngredientAllergiesIntolerances:** Ingredient-allergy associations
* **Additional metadata tables for system functionality**

## 7. API Endpoints Overview

### 7.1 Authentication Endpoints
* **POST /api/auth/register:** User registration
* **POST /api/auth/login:** User authentication
* **POST /api/auth/verify-email:** Email verification
* **POST /api/auth/logout:** User logout

### 7.2 Recipe Endpoints
* **GET /api/recipes:** Get public recipes with pagination and search
* **GET /api/recipes/{recipe_id}:** Get specific recipe details
* **POST /api/recipes/process_submission:** Submit new recipe (structured or raw text)
* **POST /api/recipes/upload_image:** Upload recipe images
* **GET /api/recipes/my-private:** Get user's private recipes
* **POST /api/recipes/{recipe_id}/rate:** Rate a recipe
* **PATCH /api/recipes/{recipe_id}/toggle-public:** Change recipe visibility

### 7.3 User Management Endpoints
* **GET /api/users/me:** Get current user profile
* **PUT /api/users/me:** Update user profile
* **GET /api/users/me/allergies:** Get user allergies
* **POST /api/users/me/allergies:** Update user allergies

### 7.4 AI Tool Endpoints
* **POST /api/classification/classify:** Image-based ingredient classification
* **POST /api/nlp/parse_recipe:** NLP recipe text parsing
* **GET /api/food-lookup/{food_name}:** Nutrition information lookup
* **GET /api/substitutions/{ingredient_name}:** Ingredient substitution suggestions

### 7.5 Meal Planning Endpoints
* **GET /api/meal-planner:** Get user meal plans
* **POST /api/meal-planner:** Create/update meal plan
* **DELETE /api/meal-planner:** Delete meal plan

### 7.6 Pantry Management Endpoints
* **GET /api/pantry:** Get user pantry ingredients
* **POST /api/pantry/add:** Add ingredient to pantry
* **PUT /api/pantry/{ingredient_id}:** Update pantry ingredient
* **DELETE /api/pantry/{ingredient_id}:** Remove ingredient from pantry

### 7.7 Shopping List Endpoints
* **GET /api/shopping-list:** Get user shopping lists
* **POST /api/shopping-list:** Create shopping list
* **POST /api/shopping-list/generate:** Generate list from meal plan

### 7.8 Admin Endpoints
* **GET /api/admin/users:** Get all users (admin only)
* **PUT /api/admin/users/{user_id}:** Update user (admin only)
* **DELETE /api/admin/users/{user_id}:** Delete user (admin only)
* **GET /api/admin/recipes:** Get all recipes (admin only)
* **GET /api/admin/classification-scores:** Get AI performance metrics (admin only)
* **GET /api/admin/contact-messages:** Get user messages (admin only)

### 7.9 Additional Endpoints
* **GET /api/allergies:** Get available allergies
* **GET /api/ingredients:** Get ingredient catalog
* **GET /api/personalized-recipes:** Get allergy-filtered recipes
* **GET /api/recipe-suggestions:** Get curated recipe suggestions
* **POST /api/contact-messages:** Submit contact form

## 8. AI Models and Integration

### 8.1 Ingredient Classification (Image-based)
* **Model Type:** TensorFlow-based image classification
* **Input:** Food/ingredient images
* **Output:** Predicted ingredient name with confidence score
* **Integration:** Direct model loading in classification service
* **Performance Tracking:** Confidence scores and accuracy metrics stored

### 8.2 Natural Language Processing (Recipe Parsing)
* **Model Type:** Google Gemini API
* **Input:** Raw recipe text
* **Output:** Structured recipe data (ingredients, instructions, timing)
* **Integration:** NLP service with recipe pipeline coordination
* **Error Handling:** Fallback mechanisms for parsing failures

### 8.3 Nutrition Lookup
* **Data Source:** Comprehensive nutrition database
* **Input:** Food item names
* **Output:** Detailed nutritional information
* **Integration:** Nutrition service with fuzzy matching
* **Data Format:** JSON responses with nutritional breakdowns

### 8.4 Ingredient Substitution
* **Model Type:** Rule-based system with AI enhancement
* **Input:** Original ingredient name
* **Output:** Substitution suggestions with ratios and considerations
* **Integration:** Substitution service with allergy awareness
* **Data Source:** Culinary expertise database

### 8.5 Floating Chatbot
* **Model Type:** AI-powered conversational interface
* **Input:** User queries and questions
* **Output:** Helpful responses and guidance
* **Integration:** Chatbot service with context awareness
* **Features:** Real-time assistance and feature guidance

## 9. Security and Authentication

### 9.1 Authentication System
* **JWT Tokens:** Secure token-based authentication
* **Email Verification:** Required account activation
* **Password Security:** Hashed password storage
* **Session Management:** Token expiration and refresh mechanisms

### 9.2 Data Protection
* **Input Validation:** Comprehensive input sanitization
* **SQL Injection Prevention:** Parameterized queries via SQLAlchemy
* **XSS Protection:** Content Security Policy and input filtering
* **CSRF Protection:** Token-based request validation

### 9.3 Privacy Features
* **User Data Control:** Users can manage their data and privacy settings
* **Recipe Visibility:** Public/private recipe control
* **Allergy Privacy:** Secure storage of sensitive health information
* **Data Retention:** Configurable data retention policies

## 10. Deployment and Infrastructure

### 10.1 Containerization
* **Docker Images:** Separate containers for frontend and backend
* **Docker Compose:** Orchestrated multi-container deployment
* **Environment Isolation:** Consistent deployment across environments
* **Volume Management:** Persistent data storage for uploads and database

### 10.2 Frontend Deployment
* **Build Process:** Vite-based production builds
* **Static Serving:** Nginx serving optimized static assets
* **API Proxying:** Nginx reverse proxy to backend services
* **Caching:** Static asset caching for performance

### 10.3 Backend Deployment
* **Flask Application:** Production-ready WSGI server
* **Database Connection:** MySQL connection pooling
* **File Storage:** Static file serving for uploaded images
* **Logging:** Comprehensive application logging

### 10.4 Environment Configuration
* **Environment Variables:** Secure configuration management
* **Database Configuration:** Connection string management
* **API Keys:** Secure storage of external service credentials
* **Feature Flags:** Configurable feature enablement

## 11. Performance and Scalability

### 11.1 Frontend Performance
* **Code Splitting:** Lazy loading of components and routes
* **Asset Optimization:** Minified CSS and JavaScript
* **Image Optimization:** Compressed recipe images
* **Caching Strategy:** Browser and CDN caching

### 11.2 Backend Performance
* **Database Optimization:** Indexed queries and connection pooling
* **API Response Caching:** Redis-based caching for frequent requests
* **Image Processing:** Optimized image upload and storage
* **AI Model Optimization:** Efficient model loading and inference

### 11.3 Scalability Considerations
* **Horizontal Scaling:** Stateless backend design
* **Database Scaling:** Read replicas and connection pooling
* **CDN Integration:** Global content delivery
* **Load Balancing:** Multiple backend instances

## 12. Monitoring and Analytics

### 12.1 Application Monitoring
* **Error Tracking:** Comprehensive error logging and reporting
* **Performance Metrics:** Response time and throughput monitoring
* **User Analytics:** Feature usage and engagement tracking
* **AI Model Performance:** Classification accuracy and confidence tracking

### 12.2 System Health
* **Database Monitoring:** Query performance and connection health
* **API Endpoint Monitoring:** Response times and error rates
* **File Storage Monitoring:** Upload success rates and storage usage
* **External Service Monitoring:** AI API availability and performance

## 13. Future Enhancements

### 13.1 Planned Features
* **Social Features:** Recipe sharing and community features
* **Advanced Meal Planning:** Nutritional goal tracking and meal optimization
* **Mobile Application:** Native mobile app development
* **Voice Integration:** Voice-controlled recipe navigation
* **Advanced AI:** More sophisticated recipe recommendations

### 13.2 Technical Improvements
* **Microservices Architecture:** Service decomposition for better scalability
* **Real-time Features:** WebSocket integration for live updates
* **Advanced Caching:** Redis-based caching for improved performance
* **API Versioning:** Backward-compatible API evolution

### 13.3 Data and Analytics
* **Advanced Analytics:** User behavior analysis and insights
* **Recipe Analytics:** Popularity tracking and trend analysis
* **Nutritional Insights:** Personalized nutritional recommendations
* **Allergy Research:** Data-driven allergy pattern analysis

---

This documentation provides a comprehensive overview of the NutriChef application architecture, features, and technical implementation. The system is designed to be scalable, maintainable, and user-friendly while providing powerful AI-driven features for enhanced culinary experiences.
