import React, { useEffect, useState, useCallback } from 'react';
import { Link as RouterLink } from 'react-router-dom';
import { useModal } from '../context/ModalContext.jsx';
import jsPDF from 'jspdf';
import { HiDownload, HiTrash } from 'react-icons/hi';
import { MdDeleteSweep } from 'react-icons/md';
import { ImSpinner2 } from 'react-icons/im';

const SHOPPING_BASKET_KEY = 'shoppingBasketItems';

function ShoppingBasketPage() {
  const { showModal } = useModal();
  const [basketItems, setBasketItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true); setError(null);
    try {
      const storedBasket = localStorage.getItem(SHOPPING_BASKET_KEY);
      if (storedBasket) {
        const parsedItems = JSON.parse(storedBasket).map(item => ({
          ...item, quantity: item.quantity !== undefined ? String(item.quantity) : '',
        }));
        setBasketItems(parsedItems);
      } else {
        setBasketItems([]);
      }
    } catch (err) {
      setError("Could not load your shopping basket. Data might be corrupted.");
      setBasketItems([]);
    } finally {
      setLoading(false);
    }
  }, []);

  const handleRemoveItem = async (itemIdToRemove) => {
    const itemToRemove = basketItems.find(item => item.id === itemIdToRemove);
    if (!itemToRemove) { setError("Could not find item to remove."); return; }
    const userConfirmed = await showModal('confirm', 'Confirm Delete Item', `Remove "${itemToRemove.name}"?`);
    if (userConfirmed) {
      try {
        const updatedBasketItems = basketItems.filter(item => item.id !== itemIdToRemove);
        setBasketItems(updatedBasketItems);
        if (updatedBasketItems.length > 0) localStorage.setItem(SHOPPING_BASKET_KEY, JSON.stringify(updatedBasketItems));
        else localStorage.removeItem(SHOPPING_BASKET_KEY);
      } catch (e) { setError("Failed to update basket."); }
    }
  };

  const handleClearBasket = async () => {
    const userConfirmed = await showModal('confirm', 'Confirm Clear Basket', 'Clear all items?');
    if (userConfirmed) {
      try {
        setBasketItems([]); localStorage.removeItem(SHOPPING_BASKET_KEY);
        showModal('alert', 'Success', 'Shopping basket cleared.', {iconType: 'success'});
      } catch (e) { setError("Failed to clear basket."); }
    }
  };

  const handleQuantityChange = (itemIdToUpdate, newQuantityStr) => {
    if (newQuantityStr === '') {
        setBasketItems(prev => prev.map(item => item.id === itemIdToUpdate ? { ...item, quantity: '' } : item));
        return;
    }
    const newQuantity = parseInt(newQuantityStr, 10);
    if (isNaN(newQuantity) || newQuantity <= 0) {
        showModal('alert', 'Invalid Quantity', 'Please enter a number greater than 0.', {iconType: 'error'});
        setBasketItems(prev => prev.map(item => item.id === itemIdToUpdate ? { ...item, quantity: '1' } : item));
        localStorage.setItem(SHOPPING_BASKET_KEY, JSON.stringify(basketItems.map(item => item.id === itemIdToUpdate ? { ...item, quantity: '1' } : item)));
        return;
    }
    try {
      const updatedBasketItems = basketItems.map(item =>
        item.id === itemIdToUpdate ? { ...item, quantity: newQuantity.toString() } : item
      );
      setBasketItems(updatedBasketItems);
      localStorage.setItem(SHOPPING_BASKET_KEY, JSON.stringify(updatedBasketItems));
    } catch (e) { setError("Failed to update quantity."); }
  };

  const handleDownloadTxt = () => {
    if (basketItems.length === 0) { showModal('alert', 'Empty Basket', 'Shopping basket is empty.', {iconType: 'info'}); return; }
    let content = "Your Shopping Basket:\n\n";
    basketItems.forEach(item => {
      let line = `- ${item.quantity || '1'} ${item.unit || ''} ${item.name}`.trim();
      if (item.originalName && item.originalName !== item.name) line += ` (substituted for ${item.originalName})`;
      line += ` (from: ${item.recipeTitle || 'Unknown Recipe'})`;
      content += line + "\n";
    });
    content += "\nGenerated by NutriChef";
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob); const a = document.createElement('a');
    a.href = url; a.download = 'shopping-list.txt'; document.body.appendChild(a);
    a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
  };

  const handleDownloadPdf = () => {
    if (basketItems.length === 0) { showModal('alert', 'Empty Basket', 'Shopping basket is empty.', {iconType: 'info'}); return; }
    const doc = new jsPDF(); let yPosition = 15; const lineHeight = 7;
    const pageHeight = doc.internal.pageSize.height; const margin = 10;
    const pageWidth = doc.internal.pageSize.width - margin * 2;
    doc.setFontSize(18); doc.text("Your Shopping Basket", margin, yPosition);
    yPosition += lineHeight * 2; doc.setFontSize(12);
    basketItems.forEach(item => {
      let itemText = `- ${item.quantity || '1'} ${item.unit || ''} ${item.name}`;
      if (item.originalName && item.originalName !== item.name) itemText += ` (for ${item.originalName})`;
      itemText += ` (from: ${item.recipeTitle || 'Unknown Recipe'})`;
      const splitText = doc.splitTextToSize(itemText, pageWidth);
      if (yPosition + (splitText.length * lineHeight) > pageHeight - margin) {
        doc.addPage(); yPosition = margin; doc.setFontSize(12);
      }
      doc.text(splitText, margin, yPosition); yPosition += (splitText.length * lineHeight);
    });
    yPosition += lineHeight;
    if (yPosition > pageHeight - margin) { doc.addPage(); yPosition = margin; }
    doc.setFontSize(10); doc.text("Generated by NutriChef", margin, yPosition);
    doc.save('shopping-list.pdf');
  };

  const commonButtonClassNameBase = "px-4 py-2 text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50";

  if (loading) return <div className="flex justify-center items-center min-h-[calc(100vh-200px)]"><ImSpinner2 className="animate-spin h-10 w-10 text-indigo-400" /></div>;
  if (error && basketItems.length === 0) return (
    <div className="page-container my-8">
        <div className="p-4 bg-red-700/[0.5] border-l-4 border-red-500 text-red-200 rounded-md">{error}</div>
    </div>
  );

  return (
    <div className="page-container my-8">
      <h1 className="text-3xl sm:text-4xl text-center mb-8">
        Your Shopping Basket
      </h1>
      {error && basketItems.length > 0 && (
        <div className="mb-4 p-3 bg-red-700/[0.5] border border-red-500 text-red-200 rounded-md text-sm">
            {error}
        </div>
      )}

      {basketItems.length === 0 && !loading && !error ? (
        <div className="text-center text-gray-400 py-10">
          <p className="text-xl mb-2">Your shopping basket is empty.</p>
          <RouterLink to="/recipes" className="font-medium hover:underline">
            Browse recipes
          </RouterLink>
          &nbsp;to add items.
        </div>
      ) : (
        <>
        <div className="max-w-2xl mx-auto mb-8 p-6">
          <div className="flex justify-end mb-4">
            <button
              onClick={handleClearBasket}
              disabled={basketItems.length === 0}
              className={`${commonButtonClassNameBase} bg-red-800 text-red-200 hover:bg-red-700 border border-red-600 focus:ring-red-500 flex items-center`}
            >
              <MdDeleteSweep className="h-5 w-5 mr-2" /> Clear All Items
            </button>
          </div>
          <div className="bg-gray-800 shadow-lg rounded-lg overflow-hidden">
            <ul className="divide-y divide-gray-700">
              {basketItems.map((item) => (
                <li key={item.id} className="px-4 py-3 sm:px-6 hover:bg-gray-700 transition ease-in-out duration-150">
                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between">
                    <div className="flex items-center mb-2 sm:mb-0">
                      <input
                        type="number"
                        value={item.quantity}
                        onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                        className="w-16 px-2 py-1 bg-gray-700 border border-gray-600 text-white rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm text-center"
                        min="1"
                        aria-label={`Quantity for ${item.name}`}
                      />
                      <div className="ml-3 text-sm">
                        <p className="font-medium text-gray-100">{item.unit || ''} {item.name}</p>
                        <p className="text-xs text-gray-400">
                          {item.originalName && item.originalName !== item.name && (
                            <span className="italic">(Substituted for: {item.originalName}) </span>
                          )}
                          From: {item.recipeTitle || 'Unknown Recipe'}
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleRemoveItem(item.id)}
                      className="p-1.5 text-red-400 hover:text-red-300 hover:bg-red-900/[0.3] rounded-md self-start sm:self-center"
                      aria-label={`Remove ${item.name}`}
                    >
                      <HiTrash className="w-5 h-5" />
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
          <div className="mt-6 flex flex-col sm:flex-row justify-end gap-3">
            <button
              onClick={handleDownloadTxt}
              disabled={basketItems.length === 0}
              className={`gradient-button ${commonButtonClassNameBase} w-full sm:w-auto flex items-center justify-center`}
            >
              <HiDownload className="mr-2 h-5 w-5" /> Download as .txt
            </button>
            <button
              onClick={handleDownloadPdf}
              disabled={basketItems.length === 0}
              className={`gradient-button ${commonButtonClassNameBase} w-full sm:w-auto flex items-center justify-center`}
            >
              <HiDownload className="mr-2 h-5 w-5" /> Download as .pdf
            </button>
          </div>
        </div>
        </>
      )}
    </div>
  );
}

export default ShoppingBasketPage;
